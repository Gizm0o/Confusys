#!/bin/sh
# Custom Linux Audit Script
# Generated by Confusys

HEADER = """#!/bin/sh\n# Custom Linux Audit Script\n# Generated by Confusys\n\nTARGET_DIR=/tmp\nHOSTNAME=`hostname`\nAUDIT_NAME="AUDIT-$HOSTNAME-$(date +'%Y%m%d-%H%M%S')"\nAUDIT_DIR="$TARGET_DIR/$AUDIT_NAME"\nOUTFILE="$AUDIT_DIR.tar.gz"\n\numask 077\nmkdir -p "$AUDIT_DIR"\ncd "$AUDIT_DIR"\n"""

FOOTER = """\ncd "$TARGET_DIR"\ntar czf "$OUTFILE" "$AUDIT_NAME"\necho "$OUTFILE" is finished, you may delete "$AUDIT_DIR" now."""

SCRIPT_BLOCKS = {
    "os_kernel": r"""\n# OS and Kernel Info\nuname -a > uname.out 2>/dev/null\ncat /etc/*release* >> uname.out 2>/dev/null\nlsmod >lsmod.out 2>/dev/null\n/proc/config* > kernel-config.out 2>/dev/null\n""",
    "memory_cpu": r"""\n# Memory and CPU Info\ncat /proc/meminfo > memory.out 2>/dev/null\nsar 5 2 > sar.out 2>/dev/null\nvmstat > vmstat.out 2>/dev/null\n""",
    "disk_filesystems": r"""\n# Disk and Filesystem Info\ndf -k > disk.out 2>/dev/null\nmount > mount.out 2>/dev/null\nls -al / > ls-root.out 2>/dev/null\nls -alR /etc > ls-etc.out 2>/dev/null\nls -alRL /dev > ls-dev.out 2>/dev/null\nls -al /tmp > ls-tmp.out 2>/dev/null\nls -al /var/tmp > ls-var-tmp.out 2>/dev/null\nls -alR /var/log /var/adm /var/spool /var/spool/mail > ls-var.out 2>/dev/null\nls -alR /opt /software /usr/local > ls-software.out 2>/dev/null\nls -alRL /root /home > ls-home.out 2>/dev/null\nls -alR /vmlin* /boot > ls-boot.out 2>/dev/null\n""",
    "processes_services": r"""\n# Processes and Services\nps auxwww > ps.out 2>/dev/null\nps > ps-old.out 2>/dev/null\nsystemctl -a > systemctl.out 2>/dev/null\nchkconfig --list > chkconfig.out 2>/dev/null\n""",
    "network": r"""\n# Network Info\nifconfig -a > ifconfig.out 2>/dev/null\nip a > ip.out 2>/dev/null\nnetstat -an > netstat-an.out 2>/dev/null\nss -an > ss-an.out 2>/dev/null\nnetstat -rn > netstat-rn.out 2>/dev/null\nip route show > ip-route.out 2>/dev/null\nnetstat -anp > netstat-anp.out 2>/dev/null\nss -anp > ss-anp.out 2>/dev/null\nss -lnp4 > ss.out\nss -lnp6 >> ss.out\n""",
    "routing": r"""\n# Routing\nnetstat -rn > netstat-rn.out 2>/dev/null\nip route show > ip-route.out 2>/dev/null\n""",
    "users_auth": r"""\n# Users and Authentication\ncat /etc/passwd > passwd.out 2>/dev/null\ncat /etc/shadow > shadow.out 2>/dev/null\ncat /etc/group > group.out 2>/dev/null\ncat /etc/sudoers > sudoers.out 2>/dev/null\ncat /etc/login* > login.out 2>/dev/null\ncat /etc/pam* > pam.out 2>/dev/null\n""",
    "history": r"""\n# User History\nlast -25 > last_25.out 2>/dev/null\nlast -5 root > last_root.out 2>/dev/null\nhistory > history.out 2>/dev/null\n""",
    "packages": r"""\n# Installed Packages\nrpm -qa > rpm.out 2>/dev/null\ndpkg -l > dpkg.out 2>/dev/null\ndpkg --get-selections "*" > dpkg-patches.out 2>/dev/null\nopkg -l > opkg.out 2>/dev/null\npkg-config --list-all > pkg-config.out 2>/dev/null\n""",
    "docker": r"""\n# Docker Info\ndocker ps >docker.out 2>/dev/null\n""",
    "lxc": r"""\n# LXC Container Info\nlxc-ls > lxc-ls.out 2>/dev/null\nlxc-ls -f -Fname,pid,state,autostart >lxc.out 2>/dev/null\nfor i in `cat lxc-ls.out`; do\n  lxc-info -n $i > lxc-info-$i.out\n  lxc-ps -n $i > lxc-ps-$i.out\n  lxc-cgroup -n $i devices.list > lxc-devices-$i.out\ndone 2>/dev/null\n""",
    "selinux": r"""\n# SELinux Info\ncp -v /sys/fs/selinux/policy selinux.policy 2>/dev/null\nps -lZ > ps-selinux.out 2>/dev/null\nls -lRZ /etc /tmp /opt /usr/local /var > ls-selinux.out 2>/dev/null\nsestatus -v > sestatus-selinux.out 2>/dev/null\nsemanage export -f semanage.out 2>/dev/null\nfor i in fcontext login user port boolean; do\n  semanage $i â€“l > selinux-$i.out\ndone 2>/dev/null\n""",
    "firewall": r"""\n# Firewall Info\nnft -n list ruleset >nft.out 2>/dev/null\niptables -nvL >iptables.out 2>/dev/null\nip6tables -nvL >ip6tables.out 2>/dev/null\nipchains -L -n -v > ipchains.out 2>/dev/null\nipfwadm  -L -n -v > ipfwadm.out 2>/dev/null\n""",
    "kernel_params": r"""\n# Kernel Parameters\nsysctl -a > sysctl.out 2>/dev/null\n""",
    "kernel_vuln": r"""\n# Kernel Vulnerabilities\n> vulnerabilities.out\nif [ -d "/sys/devices/system/cpu/vulnerabilities" ]; then\n  for i in /sys/devices/system/cpu/vulnerabilities/* ; do\n    echo -n "$i = " >> vulnerabilities.out\n    cat $i >> vulnerabilities.out\n  done\nfi\n""",
    "shared_memory": r"""\n# Shared Memory\nipcs -ma > shmem1.out\nipcs -pa > shmem2.out\n""",
    "udev": r"""\n# Udev Rules\nfind / -name "*.rules" | xargs grep "RUN=" > udev.out\n""",
    "dbus": r"""\n# DBUS Info\nQDBUS=`which qdbus 2> /dev/null`\nTIMEOUT=""\ntest -n "$TIMEOUT" && TIMEOUT="timeout -s TERM 10"\ntest -n "$QDBUS" && for h in "" "--system"; do\n  for i in `qdbus $h`; do\n    for j in `$TIMEOUT qdbus $h $i 2> /dev/null`; do\n      $TIMEOUT qdbus $h $i $j 2> /dev/null | while read LINE; do\n        echo "$h $i $j $LINE"\n      done\n    done\n  done\ndone > dbus.out\ntest -z "$QDBUS" && echo Error: qdbus is not installed, no DBUS information gathered\ntest -z "$QDBUS" && > dbus.out\n""",
    "suid_sgid": r"""\n# SUID/SGID Files\nfind / \( -perm -4000 -o -perm -2000 \) -type f > suid.out 2>/dev/null\nfind / \( -perm -4000 -o -perm -2000 \) -type f -exec /bin/ls -ld {} \; > find-s_id.out 2>/dev/null\n""",
    "world_writable": r"""\n# World Writable Files\nfind / -perm -2 '!' -type l -exec /bin/ls -ld {} \; > find-write.out 2>/dev/null\n""",
    "capabilities": r"""\n# File Capabilities\nfind / -type f -perm -1 -exec getcap {} \; > find-cap.out 2>/dev/null\n""",
    "env_umask": r"""\n# Environment and Umask\nenv > env.out\numask > umask.out\n""",
    "exports": r"""\n# Exported Filesystems\nshowmount -e > exports.out 2>/dev/null\n""",
    "rpc": r"""\n# RPC Services\nrpcinfo -p > rpcinfo.out 2>/dev/null\n""",
    "x_access": r"""\n# X Access Controls\nxhost > xhost.out 2>/dev/null\nxauth list >xauth.out 2>/dev/null\n""",
}


def generate_audit_script(technologies: list[str], token: str, machine_id: str) -> str:
    script = HEADER
    for tech in technologies:
        block = SCRIPT_BLOCKS.get(tech)
        if block:
            script += block + "\n"
    script += FOOTER

    upload_block = f"""
# ====== Auto-upload to API ======
API_URL="http://localhost:5000/machines/{machine_id}/upload"
TOKEN="{token}"

echo "Uploading audit file to $API_URL..."
curl -X POST "$API_URL" \\
  -H "Authorization: Bearer $TOKEN" \\
  -F "file=@$OUTFILE" \\
  --silent --show-error || echo "Upload failed"
"""
    script += upload_block
    script += "\nexit 0\n"
    return script

